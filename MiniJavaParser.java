
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 18 14:54:18 EDT 2015
//----------------------------------------------------

import java_cup.runtime.*;
import syntaxtree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 18 14:54:18 EDT 2015
  */
public class MiniJavaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MiniJavaParser() {super();}

  /** Constructor which sets the default scanner. */
  public MiniJavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiniJavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\007\004\000\002\007\002\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\005\010\000" +
    "\002\006\012\000\002\013\004\000\002\013\002\000\002" +
    "\012\005\000\002\012\004\000\002\015\004\000\002\015" +
    "\002\000\002\014\017\000\002\014\004\000\002\017\003" +
    "\000\002\017\002\000\002\020\005\000\002\020\003\000" +
    "\002\020\003\000\002\021\004\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\025" +
    "\005\000\002\027\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\004\000\002\051\005\000\002" +
    "\011\004\000\002\011\002\000\002\035\011\000\002\034" +
    "\007\000\002\033\007\000\002\031\006\000\002\032\011" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\005\000\002\036\005\000\002\037\005\000\002" +
    "\040\005\000\002\041\005\000\002\042\005\000\002\043" +
    "\006\000\002\044\005\000\002\045\010\000\002\030\003" +
    "\000\002\046\007\000\002\047\006\000\002\050\004\000" +
    "\002\023\003\000\002\023\002\000\002\024\005\000\002" +
    "\024\003\000\002\024\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\013\006\001\002\000\004\002\260\001" +
    "\002\000\010\002\ufffd\003\ufffd\013\ufffd\001\002\000\004" +
    "\050\010\001\002\000\004\042\011\001\002\000\022\007" +
    "\uffb2\015\uffb2\036\uffb2\037\uffb2\040\uffb2\042\uffb2\044\uffb2" +
    "\046\uffb2\001\002\000\004\021\012\001\002\000\004\023" +
    "\013\001\002\000\004\025\014\001\002\000\004\017\015" +
    "\001\002\000\004\036\016\001\002\000\004\024\017\001" +
    "\002\000\004\040\020\001\002\000\004\041\021\001\002" +
    "\000\004\050\010\001\002\000\004\037\023\001\002\000" +
    "\004\042\024\001\002\000\016\003\036\026\027\031\034" +
    "\032\037\042\040\050\010\001\002\000\024\003\uffe0\014" +
    "\uffe0\022\uffe0\026\uffe0\031\uffe0\032\uffe0\042\uffe0\043\uffe0" +
    "\050\uffe0\001\002\000\024\003\uffe2\014\uffe2\022\uffe2\026" +
    "\uffe2\031\uffe2\032\uffe2\042\uffe2\043\uffe2\050\uffe2\001\002" +
    "\000\004\036\162\001\002\000\024\003\uffde\014\uffde\022" +
    "\uffde\026\uffde\031\uffde\032\uffde\042\uffde\043\uffde\050\uffde" +
    "\001\002\000\024\003\uffe3\014\uffe3\022\uffe3\026\uffe3\031" +
    "\uffe3\032\uffe3\042\uffe3\043\uffe3\050\uffe3\001\002\000\024" +
    "\003\uffe1\014\uffe1\022\uffe1\026\uffe1\031\uffe1\032\uffe1\042" +
    "\uffe1\043\uffe1\050\uffe1\001\002\000\006\007\151\040\152" +
    "\001\002\000\004\036\143\001\002\000\004\043\141\001" +
    "\002\000\004\046\140\001\002\000\004\036\046\001\002" +
    "\000\020\003\036\026\027\031\034\032\037\042\040\043" +
    "\uffda\050\010\001\002\000\024\003\uffdf\014\uffdf\022\uffdf" +
    "\026\uffdf\031\uffdf\032\uffdf\042\uffdf\043\uffdf\050\uffdf\001" +
    "\002\000\004\043\045\001\002\000\022\003\036\022\uffda" +
    "\026\027\031\034\032\037\042\040\043\uffda\050\010\001" +
    "\002\000\006\022\uffdb\043\uffdb\001\002\000\024\003\uffdc" +
    "\014\uffdc\022\uffdc\026\uffdc\031\uffdc\032\uffdc\042\uffdc\043" +
    "\uffdc\050\uffdc\001\002\000\022\012\054\020\070\033\063" +
    "\034\060\035\066\036\062\047\067\050\055\001\002\000" +
    "\030\004\uffd3\005\uffd3\006\uffd3\010\uffd3\011\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\044\uffd3\045\uffd3\046\uffd3\001\002\000" +
    "\030\004\uffc7\005\uffc7\006\uffc7\010\uffc7\011\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000" +
    "\030\004\uffcf\005\uffcf\006\uffcf\010\uffcf\011\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\044\uffcf\045\uffcf\046\uffcf\001\002\000" +
    "\030\004\uffd0\005\uffd0\006\uffd0\010\uffd0\011\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\044\uffd0\045\uffd0\046\uffd0\001\002\000" +
    "\030\004\uffc5\005\uffc5\006\uffc5\010\uffc5\011\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\044\uffc5\045\uffc5\046\uffc5\001\002\000" +
    "\022\012\054\020\070\033\063\034\060\035\066\036\062" +
    "\047\067\050\055\001\002\000\030\004\uffbb\005\uffbb\006" +
    "\uffbb\010\uffbb\011\uffbb\037\uffbb\040\uffbb\041\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\001\002\000\030\004\uffc9\005\uffc9\006" +
    "\uffc9\010\uffc9\011\uffc9\037\uffc9\040\uffc9\041\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\001\002\000\030\004\uffc6\005\uffc6\006" +
    "\uffc6\010\uffc6\011\uffc6\037\uffc6\040\uffc6\041\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\001\002\000\030\004\uffcb\005\uffcb\006" +
    "\uffcb\010\uffcb\011\uffcb\037\uffcb\040\uffcb\041\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\001\002\000\022\004\103\005\105\006" +
    "\106\010\102\011\101\037\135\040\104\045\107\001\002" +
    "\000\022\012\054\020\070\033\063\034\060\035\066\036" +
    "\062\047\067\050\055\001\002\000\030\004\uffc8\005\uffc8" +
    "\006\uffc8\010\uffc8\011\uffc8\037\uffc8\040\uffc8\041\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\001\002\000\030\004\uffd2\005\uffd2" +
    "\006\uffd2\010\uffd2\011\uffd2\037\uffd2\040\uffd2\041\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\001\002\000\030\004\uffce\005\uffce" +
    "\006\uffce\010\uffce\011\uffce\037\uffce\040\uffce\041\uffce\044" +
    "\uffce\045\uffce\046\uffce\001\002\000\030\004\uffca\005\uffca" +
    "\006\uffca\010\uffca\011\uffca\037\uffca\040\uffca\041\uffca\044" +
    "\uffca\045\uffca\046\uffca\001\002\000\030\004\uffcc\005\uffcc" +
    "\006\uffcc\010\uffcc\011\uffcc\037\uffcc\040\uffcc\041\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\001\002\000\006\027\075\050\010" +
    "\001\002\000\030\004\uffd4\005\uffd4\006\uffd4\010\uffd4\011" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\001\002\000\030\004\uffcd\005\uffcd\006\uffcd\010\uffcd\011" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\001\002\000\030\004\uffd1\005\uffd1\006\uffd1\010\uffd1\011" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\001\002\000\004\036\131\001\002\000\004\040\076\001" +
    "\002\000\022\012\054\020\070\033\063\034\060\035\066" +
    "\036\062\047\067\050\055\001\002\000\022\004\103\005" +
    "\105\006\106\010\102\011\101\040\104\041\100\045\107" +
    "\001\002\000\030\004\uffba\005\uffba\006\uffba\010\uffba\011" +
    "\uffba\037\uffba\040\uffba\041\uffba\044\uffba\045\uffba\046\uffba" +
    "\001\002\000\022\012\054\020\070\033\063\034\060\035" +
    "\066\036\062\047\067\050\055\001\002\000\022\012\054" +
    "\020\070\033\063\034\060\035\066\036\062\047\067\050" +
    "\055\001\002\000\022\012\054\020\070\033\063\034\060" +
    "\035\066\036\062\047\067\050\055\001\002\000\022\012" +
    "\054\020\070\033\063\034\060\035\066\036\062\047\067" +
    "\050\055\001\002\000\022\012\054\020\070\033\063\034" +
    "\060\035\066\036\062\047\067\050\055\001\002\000\022" +
    "\012\054\020\070\033\063\034\060\035\066\036\062\047" +
    "\067\050\055\001\002\000\006\016\111\050\010\001\002" +
    "\000\004\036\112\001\002\000\030\004\uffbd\005\uffbd\006" +
    "\uffbd\010\uffbd\011\uffbd\037\uffbd\040\uffbd\041\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\001\002\000\026\003\116\012\054\020" +
    "\070\033\063\034\060\035\066\036\062\037\uffb6\047\067" +
    "\050\055\001\002\000\006\037\uffb7\044\120\001\002\000" +
    "\024\004\103\005\105\006\106\010\102\011\101\037\uffb4" +
    "\040\104\044\uffb4\045\107\001\002\000\004\037\117\001" +
    "\002\000\006\037\uffb3\044\uffb3\001\002\000\030\004\uffbc" +
    "\005\uffbc\006\uffbc\010\uffbc\011\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\001\002\000\022\012\054" +
    "\020\070\033\063\034\060\035\066\036\062\047\067\050" +
    "\055\001\002\000\024\004\103\005\105\006\106\010\102" +
    "\011\101\037\uffb5\040\104\044\uffb5\045\107\001\002\000" +
    "\030\004\uffc1\005\uffc1\006\uffc1\010\uffc1\011\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\044\uffc1\045\uffc1\046\uffc1\001\002\000" +
    "\030\004\uffc2\005\uffc2\006\106\010\uffc2\011\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000" +
    "\022\004\103\005\105\006\106\010\102\011\101\040\104" +
    "\041\125\045\107\001\002\000\030\004\uffbe\005\uffbe\006" +
    "\uffbe\010\uffbe\011\uffbe\037\uffbe\040\uffbe\041\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\001\002\000\030\004\uffc3\005\uffc3\006" +
    "\106\010\uffc3\011\uffc3\037\uffc3\040\uffc3\041\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\001\002\000\030\004\103\005\105\006" +
    "\106\010\uffc0\011\101\037\uffc0\040\uffc0\041\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\001\002\000\030\004\103\005\105\006" +
    "\106\010\uffbf\011\uffbf\037\uffbf\040\uffbf\041\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\001\002\000\004\037\132\001\002\000" +
    "\030\004\uffb9\005\uffb9\006\uffb9\010\uffb9\011\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\044\uffb9\045\uffb9\046\uffb9\001\002\000" +
    "\022\004\103\005\105\006\106\010\102\011\101\037\134" +
    "\040\104\045\107\001\002\000\030\004\uffc4\005\uffc4\006" +
    "\uffc4\010\uffc4\011\uffc4\037\uffc4\040\uffc4\041\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\001\002\000\004\046\136\001\002\000" +
    "\024\003\uffd7\014\uffd7\022\uffd7\026\uffd7\031\uffd7\032\uffd7" +
    "\042\uffd7\043\uffd7\050\uffd7\001\002\000\030\004\uffb8\005" +
    "\uffb8\006\uffb8\010\uffb8\011\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\001\002\000\024\003\uffdd\014" +
    "\uffdd\022\uffdd\026\uffdd\031\uffdd\032\uffdd\042\uffdd\043\uffdd" +
    "\050\uffdd\001\002\000\004\043\142\001\002\000\010\002" +
    "\uffff\003\uffff\013\uffff\001\002\000\022\012\054\020\070" +
    "\033\063\034\060\035\066\036\062\047\067\050\055\001" +
    "\002\000\022\004\103\005\105\006\106\010\102\011\101" +
    "\037\145\040\104\045\107\001\002\000\016\003\036\026" +
    "\027\031\034\032\037\042\040\050\010\001\002\000\004" +
    "\014\147\001\002\000\016\003\036\026\027\031\034\032" +
    "\037\042\040\050\010\001\002\000\024\003\uffd9\014\uffd9" +
    "\022\uffd9\026\uffd9\031\uffd9\032\uffd9\042\uffd9\043\uffd9\050" +
    "\uffd9\001\002\000\022\012\054\020\070\033\063\034\060" +
    "\035\066\036\062\047\067\050\055\001\002\000\022\012" +
    "\054\020\070\033\063\034\060\035\066\036\062\047\067" +
    "\050\055\001\002\000\022\004\103\005\105\006\106\010" +
    "\102\011\101\040\104\041\154\045\107\001\002\000\004" +
    "\007\155\001\002\000\022\012\054\020\070\033\063\034" +
    "\060\035\066\036\062\047\067\050\055\001\002\000\022" +
    "\004\103\005\105\006\106\010\102\011\101\040\104\045" +
    "\107\046\157\001\002\000\024\003\uffd5\014\uffd5\022\uffd5" +
    "\026\uffd5\031\uffd5\032\uffd5\042\uffd5\043\uffd5\050\uffd5\001" +
    "\002\000\022\004\103\005\105\006\106\010\102\011\101" +
    "\040\104\045\107\046\161\001\002\000\024\003\uffd6\014" +
    "\uffd6\022\uffd6\026\uffd6\031\uffd6\032\uffd6\042\uffd6\043\uffd6" +
    "\050\uffd6\001\002\000\022\012\054\020\070\033\063\034" +
    "\060\035\066\036\062\047\067\050\055\001\002\000\022" +
    "\004\103\005\105\006\106\010\102\011\101\037\164\040" +
    "\104\045\107\001\002\000\016\003\036\026\027\031\034" +
    "\032\037\042\040\050\010\001\002\000\024\003\uffd8\014" +
    "\uffd8\022\uffd8\026\uffd8\031\uffd8\032\uffd8\042\uffd8\043\uffd8" +
    "\050\uffd8\001\002\000\010\002\000\003\170\013\171\001" +
    "\002\000\010\002\ufffe\003\ufffe\013\ufffe\001\002\000\004" +
    "\043\257\001\002\000\004\050\010\001\002\000\010\002" +
    "\ufffc\003\ufffc\013\ufffc\001\002\000\010\002\ufffb\003\ufffb" +
    "\013\ufffb\001\002\000\006\015\175\042\176\001\002\000" +
    "\004\050\010\001\002\000\016\003\ufff6\021\ufff6\027\ufff6" +
    "\030\ufff6\043\ufff6\050\ufff6\001\002\000\016\003\210\021" +
    "\203\027\201\030\204\043\ufff2\050\211\001\002\000\030" +
    "\003\ufff7\021\ufff7\022\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\042\ufff7\043\ufff7\050\ufff7\001\002\000\006" +
    "\040\250\050\uffe7\001\002\000\004\043\247\001\002\000" +
    "\010\027\201\030\204\050\211\001\002\000\004\050\uffe8" +
    "\001\002\000\010\003\220\021\203\043\ufff2\001\002\000" +
    "\004\050\uffe6\001\002\000\004\050\010\001\002\000\006" +
    "\043\214\046\213\001\002\000\004\050\uffe4\001\002\000" +
    "\004\050\uffe9\001\002\000\016\003\ufff4\021\ufff4\027\ufff4" +
    "\030\ufff4\043\ufff4\050\ufff4\001\002\000\010\003\ufff0\021" +
    "\ufff0\043\ufff0\001\002\000\004\046\216\001\002\000\030" +
    "\003\ufff5\021\ufff5\022\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\042\ufff5\043\ufff5\050\ufff5\001\002\000\004" +
    "\043\ufff3\001\002\000\004\043\214\001\002\000\004\050" +
    "\010\001\002\000\004\036\223\001\002\000\014\003\227" +
    "\027\201\030\204\037\uffee\050\211\001\002\000\006\037" +
    "\uffec\044\uffec\001\002\000\006\037\uffef\044\245\001\002" +
    "\000\004\050\010\001\002\000\006\037\uffeb\044\uffeb\001" +
    "\002\000\004\037\231\001\002\000\004\042\232\001\002" +
    "\000\024\003\ufff6\022\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\042\ufff6\050\ufff6\001\002\000\024\003\236" +
    "\022\uffda\026\027\027\201\030\204\031\034\032\037\042" +
    "\040\050\234\001\002\000\010\007\uffb2\040\uffb2\050\uffe4" +
    "\001\002\000\004\022\240\001\002\000\004\046\237\001" +
    "\002\000\024\003\ufff4\022\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\042\ufff4\050\ufff4\001\002\000\022\012" +
    "\054\020\070\033\063\034\060\035\066\036\062\047\067" +
    "\050\055\001\002\000\022\004\103\005\105\006\106\010" +
    "\102\011\101\040\104\045\107\046\242\001\002\000\004" +
    "\043\243\001\002\000\010\003\ufff1\021\ufff1\043\ufff1\001" +
    "\002\000\006\037\uffea\044\uffea\001\002\000\010\027\201" +
    "\030\204\050\211\001\002\000\006\037\uffed\044\uffed\001" +
    "\002\000\010\002\ufff9\003\ufff9\013\ufff9\001\002\000\004" +
    "\041\251\001\002\000\004\050\uffe5\001\002\000\004\042" +
    "\253\001\002\000\016\003\ufff6\021\ufff6\027\ufff6\030\ufff6" +
    "\043\ufff6\050\ufff6\001\002\000\016\003\210\021\203\027" +
    "\201\030\204\043\ufff2\050\211\001\002\000\004\043\256" +
    "\001\002\000\010\002\ufff8\003\ufff8\013\ufff8\001\002\000" +
    "\010\002\ufffa\003\ufffa\013\ufffa\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\007\165\001\001\000\004\026\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\034\026\032\031\040\032\027\033" +
    "\024\034\031\035\025\051\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\042\011\041\026\032\031\040\032\027" +
    "\033\024\034\031\035\025\051\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\042\011\043\026\032" +
    "\031\040\032\027\033\024\034\031\035\025\051\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\022\060" +
    "\030\055\036\070\037\046\040\063\041\072\042\051\043" +
    "\050\044\064\045\071\046\047\047\056\050\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\022\136\030\055" +
    "\036\070\037\046\040\063\041\072\042\051\043\050\044" +
    "\064\045\071\046\047\047\056\050\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\022\132\030\055\036\070" +
    "\037\046\040\063\041\072\042\051\043\050\044\064\045" +
    "\071\046\047\047\056\050\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\022\076\030\055\036\070\037\046" +
    "\040\063\041\072\042\051\043\050\044\064\045\071\046" +
    "\047\047\056\050\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\022\127\030\055\036\070\037\046\040" +
    "\063\041\072\042\051\043\050\044\064\045\071\046\047" +
    "\047\056\050\052\001\001\000\034\022\126\030\055\036" +
    "\070\037\046\040\063\041\072\042\051\043\050\044\064" +
    "\045\071\046\047\047\056\050\052\001\001\000\034\022" +
    "\125\030\055\036\070\037\046\040\063\041\072\042\051" +
    "\043\050\044\064\045\071\046\047\047\056\050\052\001" +
    "\001\000\034\022\123\030\055\036\070\037\046\040\063" +
    "\041\072\042\051\043\050\044\064\045\071\046\047\047" +
    "\056\050\052\001\001\000\034\022\122\030\055\036\070" +
    "\037\046\040\063\041\072\042\051\043\050\044\064\045" +
    "\071\046\047\047\056\050\052\001\001\000\034\022\121" +
    "\030\055\036\070\037\046\040\063\041\072\042\051\043" +
    "\050\044\064\045\071\046\047\047\056\050\052\001\001" +
    "\000\004\026\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\022\113\023\114\024\112\030\055\036\070" +
    "\037\046\040\063\041\072\042\051\043\050\044\064\045" +
    "\071\046\047\047\056\050\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\022\120\030\055\036\070\037\046" +
    "\040\063\041\072\042\051\043\050\044\064\045\071\046" +
    "\047\047\056\050\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\022\143\030\055\036\070\037\046\040\063" +
    "\041\072\042\051\043\050\044\064\045\071\046\047\047" +
    "\056\050\052\001\001\000\002\001\001\000\022\010\145" +
    "\026\032\031\040\032\027\033\024\034\031\035\025\051" +
    "\030\001\001\000\002\001\001\000\022\010\147\026\032" +
    "\031\040\032\027\033\024\034\031\035\025\051\030\001" +
    "\001\000\002\001\001\000\034\022\157\030\055\036\070" +
    "\037\046\040\063\041\072\042\051\043\050\044\064\045" +
    "\071\046\047\047\056\050\052\001\001\000\034\022\152" +
    "\030\055\036\070\037\046\040\063\041\072\042\051\043" +
    "\050\044\064\045\071\046\047\047\056\050\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\022\155\030" +
    "\055\036\070\037\046\040\063\041\072\042\051\043\050" +
    "\044\064\045\071\046\047\047\056\050\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\022\162\030\055\036\070\037\046\040" +
    "\063\041\072\042\051\043\050\044\064\045\071\046\047" +
    "\047\056\050\052\001\001\000\002\001\001\000\022\010" +
    "\164\026\032\031\040\032\027\033\024\034\031\035\025" +
    "\051\030\001\001\000\002\001\001\000\010\004\166\005" +
    "\171\006\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\251\001\001\000\004" +
    "\013\176\001\001\000\016\012\177\014\204\015\201\016" +
    "\206\025\211\027\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\220\025\211\027" +
    "\205\001\001\000\002\001\001\000\006\014\204\015\216" +
    "\001\001\000\002\001\001\000\004\026\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\221" +
    "\001\001\000\002\001\001\000\016\016\225\017\227\020" +
    "\224\021\223\025\211\027\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\232" +
    "\001\001\000\034\010\042\011\234\012\177\016\206\025" +
    "\211\026\032\027\205\031\040\032\027\033\024\034\031" +
    "\035\025\051\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\022\240" +
    "\030\055\036\070\037\046\040\063\041\072\042\051\043" +
    "\050\044\064\045\071\046\047\047\056\050\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\225\021\245\025\211\027\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\253" +
    "\001\001\000\016\012\177\014\204\015\254\016\206\025" +
    "\211\027\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiniJavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiniJavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiniJavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol s){
	String err_message = "Parser has detected a syntax error at line " + s.left + " column " + s.right;
	System.err.println(err_message); 
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MiniJavaParser$actions {
  private final MiniJavaParser parser;

  /** Constructor */
  CUP$MiniJavaParser$actions(MiniJavaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MiniJavaParser$do_action(
    int                        CUP$MiniJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$MiniJavaParser$parser,
    java.util.Stack            CUP$MiniJavaParser$stack,
    int                        CUP$MiniJavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiniJavaParser$result;

      /* select the action based on the action number */
      switch (CUP$MiniJavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // iden ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Identifier(id, idleft, idright); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("iden",20, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expRest ::= error 
            {
              ExpList RESULT =null;
		 parser.report_error("Exp List", null); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expRest",18, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expRest ::= exp 
            {
              ExpList RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 if(RESULT == null) RESULT = new ExpList();
                               RESULT.addElement(ex);
                            
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expRest",18, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expRest ::= expRest COMMA exp 
            {
              ExpList RESULT =null;
		int exrleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int exrright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		ExpList exr = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 if(exr == null) exr = new ExpList();
                               exr.addElement(ex);
                               RESULT = exr;
                            
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expRest",18, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expList ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expList ::= expRest 
            {
              ExpList RESULT =null;
		int exrleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int exrright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ExpList exr = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = exr; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // not ::= NOT exp 
            {
              Not RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Not(ex); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("not",38, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // newObj ::= NEW iden LPAREN RPAREN 
            {
              NewObject RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new NewObject(i); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("newObj",37, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // newArray ::= NEW INT LBRACK exp RBRACK 
            {
              NewArray RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new NewArray(ex); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("newArray",36, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // idExp ::= IDENTIFIER 
            {
              IdentifierExp RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new IdentifierExp(ide, ideleft, ideright); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("idExp",22, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // call ::= exp DOT iden LPAREN expList RPAREN 
            {
              Call RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int exlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ExpList exl = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new Call(ex, i, exl); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arrayLength ::= exp DOT LENGTH 
            {
              ArrayLength RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new ArrayLength(ex); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("arrayLength",34, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arrayLookup ::= exp LBRACK exp RBRACK 
            {
              ArrayLookup RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new ArrayLookup(ex1, ex2); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("arrayLookup",33, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // less_than ::= exp LESS_THAN exp 
            {
              LessThan RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new LessThan(ex1, ex2); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("less_than",32, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // and ::= exp AND exp 
            {
              And RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new And(ex1, ex2); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("and",31, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // times ::= exp TIMES exp 
            {
              Times RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Times(ex1, ex2); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("times",30, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // minus ::= exp MINUS exp 
            {
              Minus RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Minus(ex1, ex2); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("minus",29, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // plus ::= exp PLUS exp 
            {
              Plus RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Plus(ex1, ex2); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("plus",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = ex; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= not 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Not n = (Not)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = n; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= newObj 
            {
              Exp RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int noright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		NewObject no = (NewObject)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = no; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= newArray 
            {
              Exp RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		NewArray na = (NewArray)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = na; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= THIS 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new This(tleft, tright); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= idExp 
            {
              Exp RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		IdentifierExp ide = (IdentifierExp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = ide; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new False(fleft, fright); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new True(tleft, tright); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new IntegerLiteral(il, illeft, ilright); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= arrayLength 
            {
              Exp RESULT =null;
		int aleleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int aleright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ArrayLength ale = (ArrayLength)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = ale; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= arrayLookup 
            {
              Exp RESULT =null;
		int aloleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int aloright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ArrayLookup alo = (ArrayLookup)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = alo; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= less_than 
            {
              Exp RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		LessThan lt = (LessThan)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = lt; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= and 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		And a = (And)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = a; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= times 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Times t = (Times)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= minus 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Minus m = (Minus)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = m; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= plus 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Plus p = (Plus)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arrAssign ::= iden LBRACK exp RBRACK EQUALS exp SEMICOLON 
            {
              ArrayAssign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new ArrayAssign(id, ex1, ex2); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("arrAssign",24, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assign ::= iden EQUALS exp SEMICOLON 
            {
              Assign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new Assign(id, ex); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("assign",23, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // print ::= PRINT LPAREN exp RPAREN SEMICOLON 
            {
              Print RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new Print(ex); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("print",25, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // while ::= WHILE LPAREN exp RPAREN statement 
            {
              While RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new While(ex, st); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("while",26, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              If RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Statement st1 = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement st2 = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new If(ex, st1, st2); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statementList ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statementList ::= statement statementList 
            {
              StatementList RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		StatementList stl = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 if(stl == null) stl = new StatementList();
                               StatementList list = new StatementList();
							   list.addElement(st);
							   for(int k = 0; k < stl.size(); k++){
									list.addElement(stl.elementAt(k));
							   }
                               RESULT = list;
                            
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // block ::= LCURLY statementList RCURLY 
            {
              Block RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		StatementList stl = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new Block(stl); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("block",39, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= error SEMICOLON 
            {
              Statement RESULT =null;
		 parser.report_error("Statement", null); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= arrAssign 
            {
              Statement RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ArrayAssign aa = (ArrayAssign)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = aa; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= assign 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Assign a = (Assign)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = a; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= print 
            {
              Statement RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Print pr = (Print)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = pr; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= while 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = w; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= if 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = i; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = b; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // idType ::= IDENTIFIER 
            {
              IdentifierType RESULT =null;
		int idtleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idtright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String idt = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new IdentifierType(idt, idtleft, idtright); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("idType",21, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // intArray ::= INT LBRACK RBRACK 
            {
              IntArrayType RESULT =null;
		 RESULT = new IntArrayType(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("intArray",19, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= idType 
            {
              Type RESULT =null;
		int idtleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idtright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		IdentifierType idt = (IdentifierType)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = idt; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= intArray 
            {
              Type RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		IntArrayType ia = (IntArrayType)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = ia; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal ::= type iden 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Formal(t, i); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalRest ::= error 
            {
              FormalList RESULT =null;
		 parser.report_error("Formal List", null); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formalRest",14, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalRest ::= formal 
            {
              FormalList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 if(RESULT == null) RESULT = new FormalList();
                               RESULT.addElement(f);
                            
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formalRest",14, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formalRest ::= formalRest COMMA formal 
            {
              FormalList RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		FormalList fr = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 if(fr == null) fr = new FormalList();
                               fr.addElement(f);
                               RESULT = fr;
                            
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formalRest",14, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formalList ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formalList",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formalList ::= formalRest 
            {
              FormalList RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		FormalList fr = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = fr; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formalList",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodDecl ::= error RCURLY 
            {
              MethodDecl RESULT =null;
		 parser.report_error("Method Decl", null); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("methodDecl",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodDecl ::= PUBLIC type iden LPAREN formalList RPAREN LCURLY varDeclList statementList RETURN exp SEMICOLON RCURLY 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		StatementList stl = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new MethodDecl(t, id, fl, vdl, stl, ex); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("methodDecl",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-12)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methodDeclList ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("methodDeclList",11, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methodDeclList ::= methodDecl methodDeclList 
            {
              MethodDeclList RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 if(mdl == null) mdl = new MethodDeclList();
							   MethodDeclList list = new MethodDeclList();
							   list.addElement(md);
							   for(int k = 0; k < mdl.size(); k++){
									list.addElement(mdl.elementAt(k));
							   }
                               RESULT = list;
                            
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("methodDeclList",11, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varDecl ::= error SEMICOLON 
            {
              VarDecl RESULT =null;
		 parser.report_error("Var Decl", null); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("varDecl",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDecl ::= type iden SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new VarDecl(t, id); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("varDecl",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDeclList ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("varDeclList",9, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDeclList ::= varDeclList varDecl 
            {
              VarDeclList RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 if(vdl == null) vdl = new VarDeclList();
                               vdl.addElement(vd);
                               RESULT = vdl;
                            
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("varDeclList",9, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // classDeclExt ::= CLASS iden EXTENDS iden LCURLY varDeclList methodDeclList RCURLY 
            {
              ClassDeclExtends RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new ClassDeclExtends(id1, id2, vdl, mdl); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDeclExt",4, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classDeclSim ::= CLASS iden LCURLY varDeclList methodDeclList RCURLY 
            {
              ClassDeclSimple RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 RESULT = new ClassDeclSimple(id, vdl, mdl); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDeclSim",3, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classDecl ::= error RCURLY 
            {
              ClassDecl RESULT =null;
		 parser.report_error("Class Decl", null); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classDecl ::= classDeclExt 
            {
              ClassDecl RESULT =null;
		int cdeleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cderight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDeclExtends cde = (ClassDeclExtends)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = cde; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= classDeclSim 
            {
              ClassDecl RESULT =null;
		int cdsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cdsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDeclSimple cds = (ClassDeclSimple)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = cds; 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDeclList ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT = new ClassDeclList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDeclList",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDeclList ::= classDeclList classDecl 
            {
              ClassDeclList RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 if(cdl == null) cdl = new ClassDeclList();
                               cdl.addElement(cd);
                               RESULT = cdl;
                            
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDeclList",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainClass ::= CLASS iden LCURLY PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK iden RPAREN LCURLY statement RCURLY RCURLY 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 RESULT = new MainClass(id1, id2, st); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("mainClass",1, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-16)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= mainClass classDeclList 
            {
              Program RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 RESULT = new Program(mc, cdl); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		RESULT = start_val;
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiniJavaParser$parser.done_parsing();
          return CUP$MiniJavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

